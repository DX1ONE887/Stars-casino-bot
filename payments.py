import logging
import requests
import asyncio
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, Application
import database
from ui import get_back_to_menu_keyboard_nested, get_payment_confirmation_keyboard, get_deposit_retry_keyboard
from config import MIN_DEPOSIT, MAX_DEPOSIT, YOOMONEY_ACCESS_TOKEN, YOOMONEY_WALLET

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
DEPOSIT_AMOUNT, LINK_SENT = range(2)

def create_payment_link(amount: float, user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –ÆMoney –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        payment_id = f"casino_{user_id}_{uuid.uuid4().hex[:8]}"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        params = {
            "receiver": YOOMONEY_WALLET,
            "quickpay-form": "shop",
            "targets": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ (ID: {user_id})",
            "paymentType": "AC",  # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
            "sum": amount,
            "label": payment_id,
            "successURL": "https://t.me/casino_stars_bot"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        base_url = "https://yoomoney.ru/quickpay/confirm.xml"
        query_string = "&".join([f"{k}={v}" for k, v in params.items()])
        payment_url = f"{base_url}?{query_string}"
        
        return {
            "payment_url": payment_url,
            "payment_id": payment_id
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return None

async def process_payment_request(payment_id: str, user_id: int, amount: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –µ–≥–æ ID"""
    if not YOOMONEY_ACCESS_TOKEN:
        logger.error("YOOMONEY_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
        response = requests.post(
            "https://yoomoney.ru/api/operation-history",
            headers={"Authorization": f"Bearer {YOOMONEY_ACCESS_TOKEN}"},
            data={
                "label": payment_id,
                "type": "deposition"
            },
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            # –ò—â–µ–º –Ω–∞—à –ø–ª–∞—Ç–µ–∂ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            for operation in data.get("operations", []):
                if operation.get("status") == "success" and operation.get("label") == payment_id:
                    # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                    await database.update_user_balance(user_id, amount, relative=True)
                    return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False

async def deposit_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    text = (
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö.\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_DEPOSIT} —Ä—É–±.\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MAX_DEPOSIT} —Ä—É–±.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu_from_nested")]
    ])
    
    await query.edit_message_text(
        text=text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    context.user_data.pop('deposit_amount', None)
    context.user_data.pop('payment_id', None)
    
    return DEPOSIT_AMOUNT

async def process_deposit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = int(update.message.text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª —Å—É–º–º—É: {amount} —Ä—É–±.")
    except (ValueError, TypeError):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return LINK_SENT
    
    if amount < MIN_DEPOSIT:
        await update.message.reply_text(
            f"‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {MIN_DEPOSIT} —Ä—É–±.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return LINK_SENT
    
    if amount > MAX_DEPOSIT:
        await update.message.reply_text(
            f"‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {MAX_DEPOSIT} —Ä—É–±.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return LINK_SENT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['deposit_amount'] = amount
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É–º–º–æ–π
    try:
        await update.message.delete()
    except:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π")
    
    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É
    return await create_payment_link_for_user(update, context, amount)

async def create_payment_link_for_user(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user = update.effective_user
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è {user.id} –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.")
    
    # –£–±–∏—Ä–∞–µ–º reply_to_message_id —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "Message to be replied not found"
    processing_msg = await context.bot.send_message(
        update.effective_chat.id,
        "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É..."
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_data = create_payment_link(amount, user.id)
    
    if not payment_data:
        await processing_msg.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_deposit_retry_keyboard()
        )
        return LINK_SENT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['payment_id'] = payment_data["payment_id"]
    context.user_data['payment_amount'] = amount
    
    text = (
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} —Ä—É–±.</b>\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        f"<a href='{payment_data['payment_url']}'>–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆMoney</a>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)'</b> –Ω–∏–∂–µ.\n"
        f"<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_data['payment_id']}</code>\n\n"
        "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ 3 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</i>"
    )
    
    await processing_msg.edit_text(
        text, 
        reply_markup=get_payment_confirmation_keyboard(),
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    
    return LINK_SENT

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    payment_id = context.user_data.get('payment_id')
    amount = context.user_data.get('payment_amount', 0)
    user_id = update.effective_user.id
    
    if not payment_id or not amount:
        await context.bot.send_message(
            update.effective_chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
        )
        return LINK_SENT
    
    # –£–±–∏—Ä–∞–µ–º reply_to_message_id —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
    processing_msg = await context.bot.send_message(
        update.effective_chat.id,
        f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂ {payment_id}..."
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
    if await process_payment_request(payment_id, user_id, amount):
        # –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        new_balance = await database.get_user_balance(user_id)
        
        text = (
            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
            f"–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: <b>{amount}</b> —Ä—É–±.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> —Ä—É–±.\n\n"
            f"<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>"
        )
    else:
        text = (
            f"‚åõ <b>–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª</b>\n\n"
            f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É\n"
            "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã\n"
            "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑\n\n"
            "–ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )
    
    await processing_msg.edit_text(
        text, 
        parse_mode='HTML',
        reply_markup=get_payment_confirmation_keyboard()
    )
    return LINK_SENT

def setup_payment_verification(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    if YOOMONEY_ACCESS_TOKEN:
        logger.info("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ÆMoney –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info(f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {YOOMONEY_WALLET}")
    else:
        logger.warning("YOOMONEY_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç!")