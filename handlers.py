import logging
import asyncio
import re
from html import escape
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
import database
from config import MIN_BET, MAX_BET, MIN_WITHDRAWAL, ADMIN_CHAT_ID
from ui import get_main_menu_keyboard, get_game_choice_keyboard, get_back_to_menu_keyboard_nested, get_back_to_menu_keyboard_simple

logger = logging.getLogger(__name__)

MAIN_MENU, GAME_CHOICE, BET_PLACEMENT, RESULT_SHOWN, WITHDRAW_AMOUNT, REQUEST_SENT, SETTING_NICKNAME, NICKNAME_SET = range(8)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    await database.add_user_if_not_exists(user.id, user.username)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞–∑–∏–Ω–æ! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    reply_markup = get_main_menu_keyboard()
    
    if update.message:
        await update.message.reply_html(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    return MAIN_MENU

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    if update.message:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
    return MAIN_MENU

async def start_over(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    return await start(update, context)

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    reply_markup = get_main_menu_keyboard()
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    return ConversationHandler.END

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    user_balance = await database.get_user_balance(user_id)
    text = f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balance}</b> —Ä—É–±."
    
    await query.edit_message_text(text, reply_markup=get_back_to_menu_keyboard_simple(), parse_mode='HTML')

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–ª—É—á–∞–µ–º query –∏–∑ update
    query = update.callback_query
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å query (–≤—ã–∑–æ–≤ –∏–∑ callback)
    if query:
        await query.answer()
        rules_text = (
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞ –ò–≥—Ä—ã –∏ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã</b>\n\n"
            f"<b>–°—Ç–∞–≤–∫–∏:</b> –æ—Ç {MIN_BET} –¥–æ {MAX_BET} —Ä—É–±.\n"
            f"<b>–í—ã–≤–æ–¥:</b> –æ—Ç {MIN_WITHDRAWAL} —Ä—É–±.\n\n"
            "<b>üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞:</b>\n"
            "  7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ (–î–∂–µ–∫–ø–æ—Ç): <b>x50</b>\n"
            "  üçáüçáüçá (–¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞): <b>x20</b>\n"
            "  üçãüçãüçã (–¢—Ä–∏ –ª–∏–º–æ–Ω–∞): <b>x10</b>\n"
            "  üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è (–¢—Ä–∏ BAR): <b>x5</b>\n\n"
            "<b>üé≤ –ö–æ—Å—Ç–∏:</b>\n"
            "  –í—ã–ø–∞–ª–æ 6: <b>x3</b>\n"
            "  –í—ã–ø–∞–ª–æ 5: <b>x2</b>\n\n"
            "<b>üèÄ/‚öΩ –ë–∞—Å–∫–µ—Ç–±–æ–ª/–§—É—Ç–±–æ–ª:</b>\n"
            "  –ú—è—á –≤ —Ü–µ–ª–∏ (–ø–æ–ø–∞–¥–∞–Ω–∏–µ): <b>x2.5</b>\n"
            "  –ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª (—Ä—è–¥–æ–º): <b>x1 (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏)</b>"
        )
        await query.edit_message_text(
            rules_text, 
            reply_markup=get_back_to_menu_keyboard_simple(), 
            parse_mode='HTML'
        )
    # –ï—Å–ª–∏ –Ω–µ—Ç query (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã)
    elif update.message:
        rules_text = (
            "<b>üìú –ü—Ä–∞–≤–∏–ª–∞ –ò–≥—Ä—ã –∏ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã</b>\n\n"
            f"<b>–°—Ç–∞–≤–∫–∏:</b> –æ—Ç {MIN_BET} –¥–æ {MAX_BET} —Ä—É–±.\n"
            f"<b>–í—ã–≤–æ–¥:</b> –æ—Ç {MIN_WITHDRAWAL} —Ä—É–±.\n\n"
            "<b>üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞:</b>\n"
            "  7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£ (–î–∂–µ–∫–ø–æ—Ç): <b>x50</b>\n"
            "  üçáüçáüçá (–¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞): <b>x20</b>\n"
            "  üçãüçãüçã (–¢—Ä–∏ –ª–∏–º–æ–Ω–∞): <b>x10</b>\n"
            "  üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è (–¢—Ä–∏ BAR): <b>x5</b>\n\n"
            "<b>üé≤ –ö–æ—Å—Ç–∏:</b>\n"
            "  –í—ã–ø–∞–ª–æ 6: <b>x3</b>\n"
            "  –í—ã–ø–∞–ª–æ 5: <b>x2</b>\n\n"
            "<b>üèÄ/‚öΩ –ë–∞—Å–∫–µ—Ç–±–æ–ª/–§—É—Ç–±–æ–ª:</b>\n"
            "  –ú—è—á –≤ —Ü–µ–ª–∏ (–ø–æ–ø–∞–¥–∞–Ω–∏–µ): <b>x2.5</b>\n"
            "  –ü–æ—á—Ç–∏ –ø–æ–ø–∞–ª (—Ä—è–¥–æ–º): <b>x1 (–≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏)</b>"
        )
        await update.message.reply_text(
            rules_text, 
            reply_markup=get_back_to_menu_keyboard_simple(), 
            parse_mode='HTML'
        )

async def play_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=get_game_choice_keyboard())
    return GAME_CHOICE

async def choose_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data["game"] = query.data.split('_')[1]
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–æ—Ç {MIN_BET} –¥–æ {MAX_BET} —Ä—É–±.):")
    return BET_PLACEMENT

async def place_bet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    try:
        bet = int(update.message.text)
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=get_back_to_menu_keyboard_nested())
        return RESULT_SHOWN

    user_balance = await database.get_user_balance(user.id)

    if not (MIN_BET <= bet <= MAX_BET) or bet > user_balance:
        await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±.", reply_markup=get_back_to_menu_keyboard_nested())
        return RESULT_SHOWN

    await database.update_user_balance(user.id, -bet, relative=True)
    
    game_emoji = {"dice": "üé≤", "basketball": "üèÄ", "football": "‚öΩ", "dart": "üé∞"}[context.user_data["game"]]
    
    msg = await context.bot.send_dice(chat_id=update.effective_chat.id, emoji=game_emoji)
    
    await asyncio.sleep(3.5)
    
    dice_value = msg.dice.value
    win_amount = 0
    result_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    game = context.user_data["game"]

    if game == 'dart':
        if dice_value == 64: win_amount, result_text = bet * 50, "–î–ñ–ï–ö–ü–û–¢! 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
        elif dice_value == 43: win_amount, result_text = bet * 20, "–û—Ç–ª–∏—á–Ω–æ! –¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞! üçáüçáüçá"
        elif dice_value == 22: win_amount, result_text = bet * 10, "–ù–µ–ø–ª–æ—Ö–æ! –¢—Ä–∏ –ª–∏–º–æ–Ω–∞! üçãüçãüçã"
        elif dice_value == 1: win_amount, result_text = bet * 5, "–í—ã–∏–≥—Ä—ã—à! –¢—Ä–∏ BAR! üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è"
    elif game == 'dice':
        if dice_value == 6: win_amount, result_text = bet * 3, "–í—ã–ø–∞–ª–æ 6! –í–∞—à –≤—ã–∏–≥—Ä—ã—à!"
        elif dice_value == 5: win_amount, result_text = bet * 2, "–í—ã–ø–∞–ª–æ 5! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
    elif game in ['basketball', 'football']:
        if dice_value == 5: win_amount, result_text = int(bet * 2.5), "–ì–û–õ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        elif dice_value == 4: win_amount, result_text = bet, "–ü–æ—á—Ç–∏! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."

    if win_amount > 0:
        await database.update_user_balance(user.id, win_amount, relative=True)
    
    await database.update_user_stats(user.id, bet, win_amount)
    
    final_balance = await database.get_user_balance(user.id)
    
    text = (f"{result_text}\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} —Ä—É–±. | –í—ã–∏–≥—Ä—ã—à: {win_amount} —Ä—É–±.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{final_balance}</b> —Ä—É–±.")
    
    await update.message.reply_html(text, reply_markup=get_back_to_menu_keyboard_nested())
    return RESULT_SHOWN

async def withdraw(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    user_balance = await database.get_user_balance(user_id)

    if user_balance < MIN_WITHDRAWAL:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAWAL} —Ä—É–±. "
            f"–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {user_balance} —Ä—É–±.",
            reply_markup=get_back_to_menu_keyboard_nested()
        )
        return REQUEST_SENT
    
    await query.edit_message_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:")
    return WITHDRAW_AMOUNT

async def process_withdrawal_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    try:
        amount = int(update.message.text)
    except (ValueError, TypeError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=get_back_to_menu_keyboard_nested())
        return REQUEST_SENT

    user_balance = await database.get_user_balance(user.id)

    if amount < MIN_WITHDRAWAL or amount > user_balance:
        error_text = (
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: {MIN_WITHDRAWAL} —Ä—É–±.\n"
            f"‚Ä¢ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} —Ä—É–±."
        )
        await update.message.reply_text(error_text, reply_markup=get_back_to_menu_keyboard_nested())
        return REQUEST_SENT

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
    context.user_data['withdrawal_amount'] = amount
    context.user_data['withdrawal_user_id'] = user.id
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await update.message.reply_text(
        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=get_back_to_menu_keyboard_nested()
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ {amount} —Ä—É–±.")
    
    return REQUEST_SENT

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if query:
        await query.answer()
        
    top_users = await database.get_top_users(10)
    
    if not top_users:
        text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
    else:
        text = "<b>üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n\n"
        for i, user in enumerate(top_users):
            rank = i + 1
            display_name = user['nickname'] if user['nickname'] else user['username']
            safe_display_name = escape(display_name) if display_name else f"User {user['user_id']}"
            balance = user['balance']
            
            line = f"<b>{rank}.</b> {safe_display_name} ‚Äî <code>{balance}</code> —Ä—É–±.\n"
            if user['user_id'] == update.effective_user.id:
                line = f"‚û°Ô∏è {line}"
            text += line
            
    reply_markup = get_back_to_menu_keyboard_simple()
    
    if query:
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.message.reply_html(text, reply_markup=reply_markup)

async def request_nickname_from_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (3-15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _-):")
    return SETTING_NICKNAME

async def request_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (3-15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _-):")
    return SETTING_NICKNAME

async def save_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    nickname = update.message.text
    if not (3 <= len(nickname) <= 15 and re.match(r'^[a-zA-Z0-9_-]+$', nickname)):
        await update.message.reply_html(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 3 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_) –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã (-)."
        )
        return SETTING_NICKNAME

    user_id = update.effective_user.id
    await database.set_user_nickname(user_id, nickname)
    
    await update.message.reply_html(
        f"‚úÖ –í–∞—à –Ω–∏–∫–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{escape(nickname)}</b>",
        reply_markup=get_back_to_menu_keyboard_nested()
    )
    return NICKNAME_SET
